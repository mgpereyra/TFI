@model Enlazar.Database.User
@{
    ViewBag.Title = "Crear reciclador";
}


<div class="d-flex mb-4">
    <div class="pb-lg-2 w-100">
        <h2><i class="fa fa-plus-circle pt-2 mr-2" aria-hidden="true"></i>Crear reciclador</h2>
    </div>
</div>


<div class="card text-white bg-dark">
    <div class="card-body">
        <form class="needs-validation" novalidate method="post">
            <h5 class="card-title">Datos personales</h5>
            <hr />
            <div class="row">
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">Nombre</label>
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">Apellido</label>
                        @Html.EditorFor(model => model.surname, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.surname, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">N° de documento</label>
                        @Html.EditorFor(model => model.dni, new { htmlAttributes = new { @class = "form-control flechas-out", required = "required" } })
                        @Html.ValidationMessageFor(model => model.dni, "", new { @class = "error" })

                    </div>
                </div>
            </div>
            <br />
            <h5 class="card-title">Ubicación</h5>
            <hr />
            <div class="row">
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">Calle y número</label>
                        @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control", @id = "txtDireccion" } })
                        @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">Partido</label>
                        @Html.EditorFor(model => model.district, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.district, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">Localidad</label>
                        @Html.EditorFor(model => model.locality, new { htmlAttributes = new { @class = "form-control", @id = "txtCiudad" } })
                        @Html.ValidationMessageFor(model => model.locality, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-lg-12 col-md-12 col-ssm-12">
                    <div class="form-group">
                        <div class="card-body" id="map_canvas"></div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <div class="form-group">
                        @Html.EditorFor(model => model.latitud, new { htmlAttributes = new { @class = "d-none", @id = "txtLat" } })
                        @Html.EditorFor(model => model.longitud, new { htmlAttributes = new { @class = "d-none", @id = "txtLng" } })
                    </div>
                </div>
            </div>


            <br />
            <h5 class="card-title">Datos de contacto</h5>
            <hr />
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">Teléfono</label>
                        @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <div class="form-group">
                        <label class="control-label">Emails</label>
                        @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control ", required = "required" } })
                        @Html.ValidationMessageFor(model => model.email, "", new { @class = "error" })
                    </div>
                </div>
            </div>
            <hr />
            <div class="d-grid d-md-flex justify-content-md-end d-sm-flex justify-content-sm-end">
                <a class="btn btn-outline-primary mr-2" href="ListRecyclers">Cancelar</a>
                <button class="btn  btn-primary" type="submit">Crear Reciclador</button>
            </div>





        </form>
    </div>
</div>

<div class="mt-4">
    @Html.ActionLink("Volver al listado", "ListRecyclers")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script>
    (function () {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()
</script>


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>



<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD63Ptld6R6m6o8p3HkX9an3ksAw_faFBs">
</script>

<script>
    let marker;
    let map;

    map = new google.maps.Map(document.getElementById('map_canvas'), {
        zoom: 14,
        center: { lat: -34.6705129, lng: -58.5628652 },
        mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    marker = new google.maps.Marker({
        position: { lat: -34.6705129, lng: -58.5628652 },
        draggable: true
    });

    $("#txtCiudad, #txtEstado, #txtDireccion").on("change", function () {
        movePin();
    });

    function movePin() {
        var geocoder = new google.maps.Geocoder();
        var textSelectM = $("#txtCiudad").val();

        var inputAddress = $("#txtDireccion").val() + ' ' + textSelectM + ' ' + "Argentina";

        geocoder.geocode({
            "address": inputAddress
        }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                //marker.setPosition(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));
                crearMarcador(results);
                map.panTo(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));
                $("#txtLat").val(results[0].geometry.location.lat());
                $("#txtLng").val(results[0].geometry.location.lng());
            }

        });
    }


    function crearMarcador(results) {

        marker.setPosition(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));
        //  map.panTo(evt.latLng);
        map.setCenter(marker.position);
        marker.setMap(map);
    }
</script>
